filters:
  main: |-
    filter {
      if ![kubernetes] {
        drop { }
      }
      ruby {
            code => "event.set('timestamp',(event.get('@timestamp').to_f * 1000).to_i)"
      }
      if [message] =~ "oracle:" {   # Don't let secrets leak
        drop { }
      } else if [kubernetes][labels][app] == "rucio-server" {
        if [message] =~ "kube-probe" or [message] =~ "health-check" {
          drop { }
        }
        if [stream] == "stdout" {
          grok {
            match => {"message" => '%{DATA}\t%{DATA:frontend}\t%{DATA:backend}\t%{DATA:clientip}\t%{DATA:requestid}\t%{NUMBER:status}\t%{NUMBER:bytesinput}\t%{NUMBER:bytesoutput}\t%{NUMBER:duration}\t"%{WORD:method} %{URIPATHPARAM:request} %{DATA:http}"\t"%{DATA:token}"\t"%{DATA:ua}"\t%{GREEDYDATA:scriptid}'}
            tag_on_failure => "_failed_parsing_restcall"
          }

          if !("_failed_parsing_restcall" in [tags]) {  # A REST-API call was executed
            grok {
              match => { "token" => "%{WORD:account}-%{GREEDYDATA:username}-%{DATA}" }
              remove_field => [ "token" ]
            }
            grok {
              match => { "ua" => "%{DATA:[useragent][name]}/%{NOTSPACE:[useragent][version]}" }
              remove_field => [ "ua" ]
              tag_on_failure => "_failed_parsing_useragent"
            }
            if "_failed_parsing_useragent" in [tags] {  # In case the grok above didn't match, the raw useragent string from the log is used
              mutate {
                add_field => { "[useragent][name]" => "%{ua}" }
                remove_field => [ "ua" ]
                remove_tag => [ "_failed_parsing_useragent" ]
              }
            }
            if [clientip] =~ '\,\s' { mutate { gsub => ["clientip", ",\s.*$", ""] } } # Split client IP in case of proxy-forward (e.g. webui)
            geoip {  # Resolve Client GEOIP
              source => "clientip"
              target => "client"
              remove_field => [ "clientip" ]
            }
          }
        }
      } else if [kubernetes][labels][app] == "rucio-daemons" {
        mutate {
          add_field => { "application" => "%{[kubernetes][container][name]}" }
        }
        if [kubernetes][labels][app] == "rucio-daemons" {
          if [stream] == "stdout" {
            grok {
               match => { "message" => "^(?<ts>\d{4}-\d{2}-\d{2}\s\d{2}:\d{2}:\d{2},\d{3})\t%{NUMBER:pid}\t%{LOGLEVEL:severity_label}\t%{GREEDYDATA:message}" }
               overwrite => ["message", "severity_label", "ts"]
               tag_on_failure => "_failed_parsing_ruciolog"
            }
          }
        }
      }
      mutate {
        add_field => { "producer" => "cms-rucio"
                       "type" => "rucio-k8s-logs"
                       "instance" => "cms-rucio-test"
                     }
      }
    }

